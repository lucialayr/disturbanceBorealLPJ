1/(1 + 0.00001*1)
10000000/(1+ 0.00001*10000000)
1000000000/(1+ 0.00001*1000000000)
1000000000/(1+ 0.0000000001*1000000000)
1000000000/(1+ 0.001*1000000000)
1/(1+ 0.001*1)
dt = 0.005
N = 10^4
T = N/dt
N = 10^3
T = N/dt
T
# Load necessary library
library(ggplot2)
# Define the flipped equation of motion
find_flipped_fixed_points <- function(k) {
# Define the flipped function U'(-x, k)
f_prime_flipped <- function(x) {
x^3  - x + k
}
# Find fixed points using the uniroot function for multiple initial guesses
fixed_points <- numeric()
for (x0 in seq(-3, 3, by = 0.5)) {
tryCatch({
x_fp <- uniroot(f_prime_flipped, c(x0 - 0.5, x0 + 0.5))$root
if (length(fixed_points) == 0 || !any(abs(fixed_points - x_fp) < 1e-5)) {
fixed_points <- c(fixed_points, x_fp)
}
}, error = function(e) {})
}
return(sort(fixed_points))
}
# Define range for k values
k_values <- seq(-2, 2, length.out = 100)
fixed_points_data <- data.frame(k = numeric(), x = numeric())
# Compute fixed points for each k
for (k in k_values) {
fixed_points <- find_flipped_fixed_points(k)
for (fp in fixed_points) {
fixed_points_data <- rbind(fixed_points_data, data.frame(k = k, x = fp))  # No need to flip y-values here
}
}
# Plot the flipped bifurcation diagram
ggplot(fixed_points_data, aes(x = k, y = x)) +
geom_point(size = 1) +
labs(title = "Flipped Bifurcation Diagram",
x = "Bifurcation Parameter k",
y = "Fixed Points") +
theme_minimal()
k_values
# Define range for k values
k_values <- seq(-1, 1, b = 0.1)
fixed_points_data <- data.frame(k = numeric(), x = numeric())
# Compute fixed points for each k
for (k in k_values) {
fixed_points <- find_flipped_fixed_points(k)
for (fp in fixed_points) {
fixed_points_data <- rbind(fixed_points_data, data.frame(k = k, x = fp))  # No need to flip y-values here
}
}
# Plot the flipped bifurcation diagram
ggplot(fixed_points_data, aes(x = k, y = x)) +
geom_point(size = 1) +
labs(title = "Flipped Bifurcation Diagram",
x = "Bifurcation Parameter k",
y = "Fixed Points") +
theme_minimal()
# Define range for k values
k_values <- seq(-1, 1, b = 0.05)
fixed_points_data <- data.frame(k = numeric(), x = numeric())
# Compute fixed points for each k
for (k in k_values) {
fixed_points <- find_flipped_fixed_points(k)
for (fp in fixed_points) {
fixed_points_data <- rbind(fixed_points_data, data.frame(k = k, x = fp))  # No need to flip y-values here
}
}
# Plot the flipped bifurcation diagram
ggplot(fixed_points_data, aes(x = k, y = x)) +
geom_point(size = 1) +
labs(title = "Flipped Bifurcation Diagram",
x = "Bifurcation Parameter k",
y = "Fixed Points") +
theme_minimal()
# Define range for k values
k_values <- seq(-1, 1, b = 0.05)
fixed_points_data <- data.frame(k = numeric(), x = numeric())
# Compute fixed points for each k
for (k in k_values) {
fixed_points <- find_flipped_fixed_points(k)
for (fp in fixed_points) {
fixed_points_data <- rbind(fixed_points_data, data.frame(k = k, x = fp))  # No need to flip y-values here
}
}
# Plot the flipped bifurcation diagram
ggplot(fixed_points_data, aes(x = k, y = x)) +
geom_point(size = 1) +
labs(title = "Flipped Bifurcation Diagram",
x = "Bifurcation Parameter k",
y = "Fixed Points") +
theme_minimal()
# Define range for k values
k_values <- c(seq(-1, 1, b = 0.05), 0.38, -0.38)
fixed_points_data <- data.frame(k = numeric(), x = numeric())
# Compute fixed points for each k
for (k in k_values) {
fixed_points <- find_flipped_fixed_points(k)
for (fp in fixed_points) {
fixed_points_data <- rbind(fixed_points_data, data.frame(k = k, x = fp))  # No need to flip y-values here
}
}
# Plot the flipped bifurcation diagram
ggplot(fixed_points_data, aes(x = k, y = x)) +
geom_point(size = 1) +
labs(title = "Flipped Bifurcation Diagram",
x = "Bifurcation Parameter k",
y = "Fixed Points") +
theme_minimal()
# Define range for k values
k_values <- c(seq(-1, 1, b = 0.05), 0.37, -0.37)
fixed_points_data <- data.frame(k = numeric(), x = numeric())
# Compute fixed points for each k
for (k in k_values) {
fixed_points <- find_flipped_fixed_points(k)
for (fp in fixed_points) {
fixed_points_data <- rbind(fixed_points_data, data.frame(k = k, x = fp))  # No need to flip y-values here
}
}
# Plot the flipped bifurcation diagram
ggplot(fixed_points_data, aes(x = k, y = x)) +
geom_point(size = 1) +
labs(title = "Flipped Bifurcation Diagram",
x = "Bifurcation Parameter k",
y = "Fixed Points") +
theme_minimal()
# Define range for k values
k_values <- c(seq(-1, 1, b = 0.05), 0.375, -0.375)
fixed_points_data <- data.frame(k = numeric(), x = numeric())
# Compute fixed points for each k
for (k in k_values) {
fixed_points <- find_flipped_fixed_points(k)
for (fp in fixed_points) {
fixed_points_data <- rbind(fixed_points_data, data.frame(k = k, x = fp))  # No need to flip y-values here
}
}
# Plot the flipped bifurcation diagram
ggplot(fixed_points_data, aes(x = k, y = x)) +
geom_point(size = 1) +
labs(title = "Flipped Bifurcation Diagram",
x = "Bifurcation Parameter k",
y = "Fixed Points") +
theme_minimal()
# Define range for k values
k_values <- c(seq(-1, 1, b = 0.05), 0.375, 0.38,  -0.375, -0.38)
fixed_points_data <- data.frame(k = numeric(), x = numeric())
# Compute fixed points for each k
for (k in k_values) {
fixed_points <- find_flipped_fixed_points(k)
for (fp in fixed_points) {
fixed_points_data <- rbind(fixed_points_data, data.frame(k = k, x = fp))  # No need to flip y-values here
}
}
# Plot the flipped bifurcation diagram
ggplot(fixed_points_data, aes(x = k, y = x)) +
geom_point(size = 1) +
labs(title = "Flipped Bifurcation Diagram",
x = "Bifurcation Parameter k",
y = "Fixed Points") +
theme_minimal()
# Define range for k values
k_values <- c(seq(-1, 1, b = 0.05), 0.37, 0.375, 0.38,  -0.375, -0.38, -0.37)
fixed_points_data <- data.frame(k = numeric(), x = numeric())
# Compute fixed points for each k
for (k in k_values) {
fixed_points <- find_flipped_fixed_points(k)
for (fp in fixed_points) {
fixed_points_data <- rbind(fixed_points_data, data.frame(k = k, x = fp))  # No need to flip y-values here
}
}
# Plot the flipped bifurcation diagram
ggplot(fixed_points_data, aes(x = k, y = x)) +
geom_point(size = 1) +
labs(title = "Flipped Bifurcation Diagram",
x = "Bifurcation Parameter k",
y = "Fixed Points") +
theme_minimal()
# Define range for k values
k_values <- c(seq(-1, 1, b = 0.05), 0.36, 0.37, 0.375,  -0.375, -0.37, -0.36)
# Plot the flipped bifurcation diagram
ggplot(fixed_points_data, aes(x = k, y = x)) +
geom_vline(xintercept = 0.38, color = "red") +
geom_point(size = 1) +
labs(title = "Flipped Bifurcation Diagram",
x = "Bifurcation Parameter k",
y = "Fixed Points") +
theme_minimal()
# Plot the flipped bifurcation diagram
ggplot(fixed_points_data, aes(x = k, y = x)) +
geom_vline(xintercept = 0.39, color = "red") +
geom_point(size = 1) +
labs(title = "Flipped Bifurcation Diagram",
x = "Bifurcation Parameter k",
y = "Fixed Points") +
theme_minimal()
# Define range for k values
k_values <- c(seq(-1, 1, b = 0.05), 0.37, -0.37)
fixed_points_data <- data.frame(k = numeric(), x = numeric())
# Compute fixed points for each k
for (k in k_values) {
fixed_points <- find_flipped_fixed_points(k)
for (fp in fixed_points) {
fixed_points_data <- rbind(fixed_points_data, data.frame(k = k, x = fp))  # No need to flip y-values here
}
}
# Plot the flipped bifurcation diagram
ggplot(fixed_points_data, aes(x = k, y = x)) +
geom_vline(xintercept = 0.39, color = "red") +
geom_point(size = 1) +
labs(title = "Flipped Bifurcation Diagram",
x = "Bifurcation Parameter k",
y = "Fixed Points") +
theme_minimal()
# Define range for k values
k_values <- c(seq(-1, 1, b = 0.05), 0.365, -0.365)
fixed_points_data <- data.frame(k = numeric(), x = numeric())
# Compute fixed points for each k
for (k in k_values) {
fixed_points <- find_flipped_fixed_points(k)
for (fp in fixed_points) {
fixed_points_data <- rbind(fixed_points_data, data.frame(k = k, x = fp))  # No need to flip y-values here
}
}
# Plot the flipped bifurcation diagram
ggplot(fixed_points_data, aes(x = k, y = x)) +
geom_vline(xintercept = 0.39, color = "red") +
geom_point(size = 1) +
labs(title = "Flipped Bifurcation Diagram",
x = "Bifurcation Parameter k",
y = "Fixed Points") +
theme_minimal()
# Define range for k values
k_values <- c(seq(-1, 1, b = 0.05), 0.37, -0.367)
log(0)
log(0.00001)
log(0.0000000001)
log(0.000000000000000000000000000001)
2/(3*sqrt(3))
dt = 0.005
N = 10^2
T = N/dt
5.5/82.7
library(tidyverse)
library(cowplot)
library(scico)
library(terra)
library(sf)
library(rnaturalearth)
library(rnaturalearthdata)
library(scales)
setwd("~/00_Thesis/figures")
source("utils_visuals.R")
theme_set(
theme_classic() +
theme(
axis.text = element_text(color = "black", size = 15),
axis.title = element_text(color = "black", size = 15),
plot.title = element_text(color = "black", size = 15),
plot.subtitle = element_text(color = "black", size = 15),
plot.caption = element_text(color = "black", size = 15),
strip.text = element_text(color = "black", size = 15),
legend.text = element_text(color = "black", size = 15),
legend.title = element_text(color = "black", size = 15),
axis.line = element_line(color = "black"),
panel.grid.major.y = element_line(color = "grey80", linewidth = 0.25),
legend.background = element_rect(fill='transparent', color = NA),
legend.box.background = element_rect(fill='transparent', color = NA),
panel.background = element_rect(fill = "transparent", colour = NA),
plot.background = element_rect(fill = "transparent", colour = NA),
strip.background = element_rect(fill = "transparent", color = NA)
)
)
unit_conversion = function(x, var) {
if (var == "tas") {
x = x - 273.15
} else if (var == "pr") {
x = x*60 *60 *24*356
}
else {
x = x
}
return(x)
}
study_region = terra::vect("climate_data/albedo_significance_ssp585_d0.04_albedo_30years2100.shp")
load_climate_variables_ts = function(study_region = study_region) {
data = list()
for (s in c("picontrol", "ssp126", "ssp370", "ssp585")) {
for (var in c("tas", "pr", "rsds")) {
df = terra::rast(paste0("climate_data/mri-esm2-0_r1i1p1f1_", s, "_", var, "_daily_inverted_1850_2300_boreal_yearly.nc")) %>%
terra::mask(study_region) %>%
terra::global(na.rm = T) %>%
terra::as.data.frame() %>%
mutate(Year = row_number() + 1849,
s = s,
v = var,
mean = unit_conversion(mean, var))
data = append(data, list(df))
}
}
df = purrr::reduce(data, rbind)
df_paper1_table = df %>%
filter(v == "tas") %>%
group_by(s) %>%
arrange(Year) %>%
mutate(v_smoothed = zoo::rollmean(mean, 30, align = "left", fill = NA)) %>%
ungroup() %>%
group_by(Year) %>%
mutate(v_smoothed_a = v_smoothed[s == "a"]) %>%  # Get the v_smoothed value where s == "a"
ungroup() %>%
mutate(delta_vs_a = v_smoothed - v_smoothed_a)
df_historical = df %>%
filter(s == "ssp126",
Year < 2015) %>%
mutate(s = "historical")
df = df %>%
mutate(mean = case_when(s != "picontrol" & Year < 2015 ~ NA_real_,
TRUE ~ mean)) %>%
bind_rows(df_historical)
return(df)
}
data = list()
for (s in c("picontrol", "ssp126", "ssp370", "ssp585")) {
for (var in c("tas", "pr", "rsds")) {
df = terra::rast(paste0("climate_data/mri-esm2-0_r1i1p1f1_", s, "_", var, "_daily_inverted_1850_2300_boreal_yearly.nc")) %>%
terra::mask(study_region) %>%
terra::global(na.rm = T) %>%
terra::as.data.frame() %>%
mutate(Year = row_number() + 1849,
s = s,
v = var,
mean = unit_conversion(mean, var))
data = append(data, list(df))
}
}
df_paper1_table = df %>%
filter(v == "tas") %>%
group_by(s) %>%
arrange(Year) %>%
mutate(v_smoothed = zoo::rollmean(mean, 30, align = "left", fill = NA)) %>%
ungroup() %>%
pivot_wider(names_from = s, values_from = v_smoothed) %>%
pivot_longer(cols = c("ssp126", "ssp370", "ssp585"), names_to = "s", values_to = "mean")
df_paper1_table = df %>%
filter(v == "tas") %>%
group_by(s) %>%
arrange(Year) %>%
mutate(v_smoothed = zoo::rollmean(mean, 30, align = "left", fill = NA)) %>%
ungroup() %>%
pivot_wider(names_from = s, values_from = v_smoothed)
View(df_paper1_table)
df = purrr::reduce(data, rbind)
data = list()
for (s in c("picontrol", "ssp126", "ssp370", "ssp585")) {
for (var in c("tas", "pr", "rsds")) {
df = terra::rast(paste0("climate_data/mri-esm2-0_r1i1p1f1_", s, "_", var, "_daily_inverted_1850_2300_boreal_yearly.nc")) %>%
terra::mask(study_region) %>%
terra::global(na.rm = T) %>%
terra::as.data.frame() %>%
mutate(Year = row_number() + 1849,
s = s,
v = var,
mean = unit_conversion(mean, var))
data = append(data, list(df))
}
}
df = purrr::reduce(data, rbind)
df_paper1_table = df %>%
filter(v == "tas") %>%
group_by(s) %>%
arrange(Year) %>%
mutate(v_smoothed = zoo::rollmean(mean, 30, align = "left", fill = NA)) %>%
ungroup() %>%
pivot_wider(names_from = s, values_from = v_smoothed) %>%
pivot_longer(cols = c("ssp126", "ssp370", "ssp585"), names_to = "s", values_to = "mean")
df_paper1_table = df %>%
filter(v == "tas") %>%
group_by(s) %>%
arrange(Year) %>%
mutate(v_smoothed = zoo::rollmean(mean, 30, align = "left", fill = NA)) %>%
ungroup()
View(df_paper1_table)
ggplot() + geom_line(data = df_paper1_table, aes(x = Year, y = v_smooted, color = s)) + geom_line(data = df_paper1_table, aes(x = Year, y = mean, color = s), alpha = .5)
ggplot() + geom_line(data = df_paper1_table, aes(x = Year, y = v_smoothed, color = s)) + geom_line(data = df_paper1_table, aes(x = Year, y = mean, color = s), alpha = .5)
df_paper1_table = df %>%
filter(v == "tas") %>%
group_by(s) %>%
arrange(Year) %>%
mutate(v_smoothed = zoo::rollmean(mean, 30, align = "left", fill = NA)) %>%
ungroup() %>%
pivot_wider(names_from = s, values_from = v_smoothed)
View(df_paper1_table)
df_paper1_table = df %>%
filter(v == "tas") %>%
group_by(s) %>%
arrange(Year) %>%
mutate(v_smoothed = zoo::rollmean(mean, 30, align = "left", fill = NA)) %>%
ungroup() %>%
select(-mean) %>%
pivot_wider(names_from = s, values_from = v_smoothed)
View(df_paper1_table)
df_paper1_table = df %>%
filter(v == "tas") %>%
group_by(s) %>%
arrange(Year) %>%
mutate(v_smoothed = zoo::rollmean(mean, 30, align = "left", fill = NA)) %>%
ungroup() %>%
select(-mean) %>%
pivot_wider(names_from = s, values_from = v_smoothed) %>%
pivot_longer(cols = c("ssp126", "ssp370", "ssp585"), names_to = "s", values_to = "mean")
df_paper1_table = df %>%
filter(v == "tas") %>%
group_by(s) %>%
arrange(Year) %>%
mutate(v_smoothed = zoo::rollmean(mean, 30, align = "left", fill = NA)) %>%
ungroup() %>%
select(-mean) %>%
pivot_wider(names_from = s, values_from = v_smoothed) %>%
pivot_longer(cols = c("ssp126", "ssp370", "ssp585"), names_to = "s", values_to = "mean") %>%
mutate(delta = mean - historical)
df_paper1_table = df %>%
filter(v == "tas") %>%
group_by(s) %>%
arrange(Year) %>%
mutate(v_smoothed = zoo::rollmean(mean, 30, align = "left", fill = NA)) %>%
ungroup() %>%
select(-mean) %>%
pivot_wider(names_from = s, values_from = v_smoothed) %>%
pivot_longer(cols = c("ssp126", "ssp370", "ssp585"), names_to = "s", values_to = "mean") %>%
mutate(delta = mean - picontrol)
library(tidyverse)
library(furrr)
source("code/utils_general.R")
# all variables except et paralelized
calculate_effect_single = function(climate_scenario, disturbance_regime, type, variable, column_of_interest, months) {
print(months)
months = season_to_months(months)
print(months)
df_0 = read_csv(paste0("data/processed/", create_name_timeseries("picontrol", 0.003, variable, type), "_processed.csv"),
show_col_types = FALSE) %>%
filter(if (any("month" %in% names(.))) month %in% months else TRUE) %>% #filter for correct season if data is monthly
group_by(year) %>%
summarise(x_0 = mean(!!rlang::sym(column_of_interest), na.rm = TRUE))
df_s = read_csv(paste0("data/processed/", create_name_timeseries(climate_scenario, 0.003, variable, type), "_processed.csv"),
show_col_types = FALSE) %>%
filter(if (any("month" %in% names(.))) month %in% months else TRUE) %>% #filter for correct season if data is monthly
group_by(year) %>%
summarise(s = mean(!!rlang::sym(column_of_interest), na.rm = TRUE))
df_d = read_csv(paste0("data/processed/", create_name_timeseries("picontrol", round(as.numeric(disturbance_regime), 3), variable, type), "_processed.csv"),
show_col_types = FALSE) %>%
filter(if (any("month" %in% names(.))) month %in% months else TRUE) %>% #filter for correct season if data is monthly
group_by(year) %>%
summarise(d = mean(!!rlang::sym(column_of_interest), na.rm = TRUE))
df_sd = read_csv(paste0("data/processed/", create_name_timeseries(climate_scenario, round(as.numeric(disturbance_regime), 3), variable, type), "_processed.csv"),
show_col_types = FALSE) %>%
filter(if (any("month" %in% names(.))) month %in% months else TRUE) %>% #filter for correct season if data is monthly
group_by(year) %>%
summarise(sd = mean(!!rlang::sym(column_of_interest), na.rm = TRUE))
components = list(df_0, df_s, df_d, df_sd)
df = purrr::reduce(components, full_join) %>%
mutate(across(c("s", "d", "sd"), list(D = ~ round(. - x_0, 3)),  .names = "D_{col}"),
D_x = D_sd - D_d - D_s) %>%
select(-x_0, -s, -d, -sd) %>%
pivot_longer(cols = c("D_s", "D_d", "D_sd", "D_x"),
names_to = "factor", values_to = paste0("effect_", type))
return(df)
}
calculate_effect_variable = function(climate_scenario, disturbance_regime, variable, column_of_interest, months) {
df = full_join(calculate_effect_single(climate_scenario, disturbance_regime, "global", variable, column_of_interest, months),
calculate_effect_single(climate_scenario, disturbance_regime, "smoothed", variable, column_of_interest, months)) %>%
pivot_longer(cols = c("effect_global", "effect_smoothed"),
names_to = "type", values_to = "effect") %>%
mutate(variable = column_of_interest)
return(df)
}
attribution_processed_final = function(variable_list, climate_scenario, disturbance_regime, ncore) {
plan(multisession, workers = ncore)
results = future_pmap_dfr(variable_list, ~calculate_effect_variable(climate_scenario, disturbance_regime,
..1, ..2, ..3))
write_csv(results, "data/final/final_factors.csv")
}
attribution_processed_final(variable_list = data.frame(variable = c("albedo", "fpc", "fpc", "fpc", "fpc", "met"),
column_of_interest = c("albedo", "total", "bne", "tundra", "bl", "aet"),
months = c("DJF", 0, 0, 0, 0, "MAM")),
climate_scenario = "ssp585",
disturbance_regime = "0.04",
ncore = 4)
attribution_processed_final(variable_list = data.frame(variable = c("albedo", "fpc", "fpc", "fpc", "fpc", "met"),
column_of_interest = c("albedo", "total", "bne", "tundra", "bl", "aet"),
months = c("DJF", 0, 0, 0, 0, "MAM")),
climate_scenario = "ssp126",
disturbance_regime = "0.1",
ncore = 4)
library(tidyverse)
library(furrr)
source("code/utils_general.R")
setwd("~/02_Science/disturbanceBorealLPJ_github")
source("code/utils_general.R")
attribution_processed_final(variable_list = data.frame(variable = c("albedo", "fpc", "fpc", "fpc", "fpc", "met"),
column_of_interest = c("albedo", "total", "bne", "tundra", "bl", "aet"),
months = c("DJF", 0, 0, 0, 0, "MAM")),
climate_scenario = "ssp126",
disturbance_regime = "0.1",
ncore = 4)
